<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://coder-xbai.github.io/atom.xml" rel="self"/>
  
  <link href="https://coder-xbai.github.io/"/>
  <updated>2023-06-18T08:20:50.099Z</updated>
  <id>https://coder-xbai.github.io/</id>
  
  <author>
    <name>coder-xbai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SparseArray</title>
    <link href="https://coder-xbai.github.io/2023/06/18/SparseArray.html"/>
    <id>https://coder-xbai.github.io/2023/06/18/SparseArray.html</id>
    <published>2023-06-18T07:29:49.000Z</published>
    <updated>2023-06-18T08:20:50.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="稀疏矩阵的原理及java实现"><a href="#稀疏矩阵的原理及java实现" class="headerlink" title="稀疏矩阵的原理及java实现"></a>稀疏矩阵的原理及java实现</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/images/pic/SparseArray_1.jpg" alt="img"></p><p>如上图，在一个11X11的二维数组中，其实只有几个有效数字，如果全部存储，会造成空间上的浪费，使用3X3的稀疏数组存储有效值，会节约大量空间。</p><p>其中稀疏数组的 row[0][0] ：原始二维数组的行 数；row[0][1]：原始二维数组的列数；row[0][2]：原始二维数组有效值的个数。稀疏数组从第二行开始：row[1][0]代表原始二维数组第一个有效值所在的行索引 ；row[1][0]：原始二维数组第一个有效值所在的列索引；row[1][2]：原始二维数组第一个有效值</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zsf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/6/18 9:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//      创建一个原始的二维数组  11*11</span></span><br><span class="line"><span class="comment">//        0表示无棋子 1：黑子 2：白子</span></span><br><span class="line">        <span class="type">int</span> chesssArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//        给有棋子的位置赋值</span></span><br><span class="line">        chesssArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chesssArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始二维数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : chesssArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 将二维转换为稀疏数组</span></span><br><span class="line"><span class="comment">         * 1 遍历二维数组 得到非0数据的个数</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chesssArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        2 创建对应的稀疏数组</span></span><br><span class="line">        <span class="type">int</span> sparseArry[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];  <span class="comment">//第二行开始记录值</span></span><br><span class="line"><span class="comment">//        3 给稀疏数组第一行赋值</span></span><br><span class="line">        sparseArry[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArry[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArry[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"><span class="comment">//        4 ,遍历二维数组 ，将非0的数放入稀疏数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//用于记录第几个非0的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chesssArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;  <span class="comment">//从第二行稀疏数组开始记录非0值所在的行与列</span></span><br><span class="line">                    sparseArry[count][<span class="number">0</span>] = i;  <span class="comment">//行的位置</span></span><br><span class="line">                    sparseArry[count][<span class="number">1</span>] = j;<span class="comment">//列的位置</span></span><br><span class="line">                    sparseArry[count][<span class="number">2</span>] = chesssArr1[i][j];<span class="comment">//值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        5 输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;得到的稀疏的数组：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sparseArry.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>, sparseArry[i][<span class="number">0</span>], sparseArry[i][<span class="number">1</span>], sparseArry[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        将稀疏数组还原成原始二维数组</span></span><br><span class="line"><span class="comment">//        1.先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的 chessArr2=int[11][11]</span></span><br><span class="line"><span class="comment">//        2.在读取稀疏数组后几行的数据，并赋给原始的二维数组即可.</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> chesssArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArry[<span class="number">0</span>][<span class="number">0</span>]][sparseArry[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArry.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            chesssArr2[sparseArry[i][<span class="number">0</span>]][sparseArry[i][<span class="number">1</span>]] = sparseArry[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的二维数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : chesssArr2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">SparseArray</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SparseArray</span>();</span><br><span class="line"><span class="comment">//        a.save_sparseArray(sparseArry,&quot;src\\com\\zsf\\day01\\sparse.txt&quot;);</span></span><br><span class="line">        <span class="type">int</span>[][] load_sparseArray = a.load_sparseArray(<span class="string">&quot;src\\com\\\\zsf\\day01\\sparse.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;读入的稀疏矩阵为~~~~~~~~&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; load_sparseArray.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>, load_sparseArray[i][<span class="number">0</span>], load_sparseArray[i][<span class="number">1</span>], load_sparseArray[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="稀疏数组的保存与加载"><a href="#稀疏数组的保存与加载" class="headerlink" title="稀疏数组的保存与加载"></a>稀疏数组的保存与加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] save_sparseArray(<span class="type">int</span> sparseArry[][], String file_path) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//    将稀疏数组保存下来 &quot;./sparse.txt&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">save_dir</span> <span class="operator">=</span> file_path;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(save_dir);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(save_dir);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sparseArry.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; sparseArry[i].length; j++) &#123;</span><br><span class="line">                    fileWriter.write(sparseArry[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                    一行输出完后添加换行符</span></span><br><span class="line">                fileWriter.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fileWriter.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        加载</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] load_sparseArray(String file_path) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file_path);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        String[] tem;</span><br><span class="line"><span class="comment">//            在使用一次in.lines/readline后，文件指针指向文件末尾，即都是0</span></span><br><span class="line"><span class="comment">//        long num_row = in.lines().count();</span></span><br><span class="line">        <span class="type">int</span> sparseArry[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//       1 要确定文件中稀疏数组有多少行</span></span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//          line  接收了每一行的 字符 ,即稀疏数组的 行数</span></span><br><span class="line">            tem = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>, Integer.parseInt(tem[<span class="number">0</span>]), Integer.parseInt(tem[<span class="number">1</span>]), Integer.parseInt(tem[<span class="number">2</span>]));</span><br><span class="line">            sparseArry[count][<span class="number">0</span>] = Integer.parseInt(tem[<span class="number">0</span>]);  <span class="comment">//行的位置</span></span><br><span class="line">            sparseArry[count][<span class="number">1</span>] = Integer.parseInt(tem[<span class="number">1</span>]);<span class="comment">//列的位置</span></span><br><span class="line">            sparseArry[count][<span class="number">2</span>] = Integer.parseInt(tem[<span class="number">2</span>]);<span class="comment">//值</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sparseArry;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="/images/pic/SparseArray_2.jpg" alt="img"></p><h3 id="容易踩坑的点"><a href="#容易踩坑的点" class="headerlink" title="容易踩坑的点"></a>容易踩坑的点</h3><ol><li>使用  BufferedReader 的api 时要注意，你只要调用过一次 in.read或in.read()文件指针指向文件末尾，即都是0</li><li>时时记住模块化开发，提高程序的复用性</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;稀疏矩阵的原理及java实现&quot;&gt;&lt;a href=&quot;#稀疏矩阵的原理及java实现&quot; class=&quot;headerlink&quot; title=&quot;稀疏矩阵的原理及java实现&quot;&gt;&lt;/a&gt;稀疏矩阵的原理及java实现&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot;</summary>
      
    
    
    
    <category term="data_Structures&amp; algorithm" scheme="https://coder-xbai.github.io/categories/data-Structures-algorithm/"/>
    
    
    <category term="SparseArray" scheme="https://coder-xbai.github.io/tags/SparseArray/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库</title>
    <link href="https://coder-xbai.github.io/2023/02/01/MongDB.html"/>
    <id>https://coder-xbai.github.io/2023/02/01/MongDB.html</id>
    <published>2023-02-01T02:39:11.000Z</published>
    <updated>2023-06-16T05:49:51.299Z</updated>
    
    <content type="html"><![CDATA[<p> MongoDB数据库是以集合为单位的</p><ul><li>use 数据库 不是集合<h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul><h3 id="mongodb插入数据"><a href="#mongodb插入数据" class="headerlink" title="mongodb插入数据"></a>mongodb插入数据</h3><ul><li>db.collection.insert({}） 插入数据，id存在就出错</li><li>dbcollection.save({}) 插入数据，_id存在就修改，_id不存在就添加</li></ul><p>###修改数据 db.集合名称。update（<query>,<query>,{multi:<boolean>})</p><ul><li>db.collection.update({“name”:”hr”},{“name”:”mnc”})  更新一条，根据键值对更新</li></ul><ul><li>db.collection.update({“name”:”hr”},{$set:{“name”:”mnc”}}） 更新一条</li></ul><ul><li>db.collection.update({},$set:{“gender”:0},{multi:true}) muiti参数默认为false时，只更新一条数据，为true时，更新全部数据</li></ul><p>###删除数据库</p><ul><li> db.dropDatabase()<br>{ “dropped” : “runoob”, “ok” : 1 }<br>###删除集合</li><li>db.collection.drop()<br>###删除数据</li></ul><p>-db.collection.remove({“age”:”22”},{justone:true}) justone 默认为false，即删除全部指定条件的数据。为false时，只删除一条数据</p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ul><li><p>db.collection.find({“age”:”22”}) 通过某条数据中的片段（键值对）来进行限定查询，这是一个多行查询</p></li><li><p>db.collection.findOne({“age”:”22”}) 只查询符合条件的一条数据</p></li></ul><ul><li> db.collection.find({“age”:”22”}).pretty() 格式化输出查询结果</li></ul><p>####比较运算符</p><ul><li><p>等于：    ：</p></li><li><p>小于：    $lt(less than)</p></li><li><p>小于等于： $lte(less than equal)</p></li><li><p>大于：    $gt(greater than)</p></li><li><p>大于等于： $gte(greater than equal)</p></li><li><p>不等于：   $ne</p></li><li><p>范围：     $in</p></li><li><p>db.collection.find({“age”:{$lt:18}}) 查询年龄小于18的所有的数据</p></li><li><p>db.collection.find({age:{$in:[18,28,38]}})   查询年龄18，28，38 的数据</p></li><li><p>db.collection.find（{“age”:”18”,”addr”:”上海”}）多字段查询</p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>and :在json中写多个条件即可</li></ul><ul><li>$or :值为数组，数组中每个元素为json</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.test1000.find(&#123;$or:[&#123;age:12&#125;,&#123;&quot;name&quot;:&quot;xiaohong&quot;&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">   # $or:[&#123;键值对&#125;，键值对] </span><br></pre></td></tr></table></figure><ul><li><p>$nor: （既不也不）</p></li><li><p>db.collection1.find({$nor:[{name:”xiaomu”},{name:”xiaoli”}]}) 查询姓名不为xiaomu,xiaoli的全部数据</p></li><li><p>不在范围：     $nin:[]</p></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>db.collection.find({name:/^abc/})  #name 字段中包含abc的所欲数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.test1000.find(&#123;name:&#123;$regex:&quot;hong&quot;&#125;&#125;) </span><br><span class="line"> #包含hong这个字段的数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test1000.find(&#123;name:&#123;$regex:&quot;hong$&quot;&#125;&#125;)  #以hong结尾的字段的数据 </span><br></pre></td></tr></table></figure><p>###分页：</p><ul><li>db.collection1.find().skip(0).limit(10)    ;//查询从0条开始，查询10条，skip()方法默认参数为 0 ，表示跳过的条数 （当数据量大的时候，先skip再limit）</li></ul><p>###自定义查询</p><ul><li> db.test1000.find({$where:function(){return this.age&gt;18;}})  查询年龄大于18的数据</li></ul><p>###投影查询 </p><ul><li>db.collection.find({},_id:0,name:1) 参数为1表示显示，参数为0为不显示，如果不显示字段，要明确设置为0</li></ul><p>###排序</p><ul><li>db.collection1.find().sort({age:1});//按照年龄升序排序，为-1的话表示降序排序</li></ul><p>###存在</p><ul><li>db.c2.find({hight:{$exists:1}})；//查询存在hight字段的数据</li></ul><p>###查看数据总条数</p><ul><li>db.collection1.count();//统计集合collection1中的数据数量</li><li>db.collection1.find({条件}).count();//统计集合collection1中的数据数量</li></ul><p>#消除重复</p><ul><li>db.collection.distinct({})</li></ul><p>##数据备份与恢复</p><ol><li>备份：mongodump -h dbhost -d dbname -o dbdirectory</li></ol><ol start="2"><li>-h：mongodb所在服务器地址，如127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</li><li>-d：需要备份的数据库实例，如：test</li><li>-o：需要备份的数据存放的位置，例如：d:\data (如果没有则自动创建)</li></ol><ul><li>恢复：mongorestore -h dbhost -d dbname -directoryperdb dbdirectory</li></ul><ol start="5"><li>-h：mongodb所在服务器地址，如127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</li></ol><ol start="6"><li>-d：需要备份的数据库实例，如：test，此名称也可以和备份的时候不一样</li></ol><ol start="7"><li>-directoryperdb ：备份数据所在的位置，例如：d:\data<br>注意：恢复时要在退出mongo命令行状态下执行</li></ol><p>###导入和导出</p><ul><li>导出：mongoexport -h dbhost -d dbname -c collectionName -o output</li></ul><ol><li>-h：数据库地址</li><li>-d：指明使用的库</li><li>-c：指明要导出的集合</li><li>-o：指明要导出的文件路径加文件名，文件名可以是txt、word、excel等多种文件格式</li></ol><p>-导入：mongoimport -h dbhost -d dbname -c collectionname 文件的地址路径</p><ol><li>-h：数据库地址</li><li>-d：指明使用的库</li><li>-c：指明要导出的集合</li><li>注意：导入时要在退出mongo命令行状态下执行，导入导出与数据备份和恢复相似</li></ol><h1 id="mongodb聚合命令"><a href="#mongodb聚合命令" class="headerlink" title="mongodb聚合命令"></a>mongodb聚合命令</h1><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.collection.aggregate(</span><br><span class="line">&#123; $group:&#123;</span><br><span class="line"></span><br><span class="line">_id:&quot;$gender&quot;,        #_id:(可以是多个参数，后续调用时，用.对象名的方法)</span><br><span class="line">counter:&#123;$sum:1&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中还有</p><ul><li>$match(匹配到适合条件的数据)</li><li>$project：(投影显示)修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li>$min,max,sun,avg,first,last 等</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。（有一个保留空值和空列表的参数：perserve….）</li><li>$sort:将输入文档排序后输出。</li><li>$geoNear：输出接近某一地理位置的有序文档。</li></ul><h3 id="爬虫数据去重（增量式爬虫）"><a href="#爬虫数据去重（增量式爬虫）" class="headerlink" title="爬虫数据去重（增量式爬虫）"></a>爬虫数据去重（增量式爬虫）</h3><ul><li>使用数据可建立关键字段的唯一索引进行去重</li><li>联合索引（通过多个字段来确定数据的唯一性）</li></ul><ul><li>url地址去重 <ul><li>url地址对应的数据不会变的情况，url地址能够唯一判别一条数据的情况</li><li>url存在redis中</li></ul><ol><li>拿到url地址，判断url在redis的集合中是否存在</li><li>存在：说明url已经被请求过，不再请求</li><li>不存在：url没有被请求过，请求，把该url存入redis的集合中 </li></ol></li></ul><p>####布隆过滤器 （redis）</p><ul><li>使用加密算法加密url地址，得到多个值，</li><li>往对应值的位置把结果设置为1</li><li>新来一个url地址，一样通过加密算法生成多个值</li><li>如果对应位置的值全为1，说明这个url地址已经请求过</li><li>否则没有请求过，请求后，就把对应位置的值设置为1</li></ul><h4 id="根据数据本身去重"><a href="#根据数据本身去重" class="headerlink" title="根据数据本身去重"></a>根据数据本身去重</h4><ul><li>选择特定的字段，使用加密算法（MD5，sha1）将字段进行加密，生成字符串，存入redis的集合中</li><li> 后续新来一条数据，同样的方法进行加密，如果得到的字符串在redis中存在，说明数据存在，对数据进行更新，否则说明数据不存在，直接插入</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; MongoDB数据库是以集合为单位的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use 数据库 不是集合&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mongodb插入数据&quot;&gt;</summary>
      
    
    
    
    <category term="database" scheme="https://coder-xbai.github.io/categories/database/"/>
    
    
    <category term="MongoDB" scheme="https://coder-xbai.github.io/tags/MongoDB/"/>
    
  </entry>
  
</feed>
